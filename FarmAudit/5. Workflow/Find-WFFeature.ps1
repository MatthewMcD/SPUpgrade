if ((Get-PSSnapin "Microsoft.SharePoint.PowerShell" -ErrorAction SilentlyContinue) -eq $null) {    Add-PSSnapin "Microsoft.SharePoint.PowerShell"}
[PSObject[]]$global:resultsarray = @()#name of the feature we are looking for[string]$ns2Find = "DP.Sharepoint"#Output File Prefix$outfile = "WFFeature"Clear-Host#If true it will enumerate the Action names and detect$enumActions = $true#output file name$fileName = "C:\users\ruby\desktop\logs\$outfile-" + $(Get-Date -Format "yyyyMMddHHmmss") + ".csv"        Function GetFiles($folder){     foreach($file in $folder.Files)    {        Write-Host "Inspecting $($file.Name)"        if($file.Name.Split('.')[-1] -eq "xoml")        {            $web2 = Get-SPWeb $file.Web.Url            $wFile = $web2.GetFileOrFolderObject($web2.URL +"/"+ $file.URL)            if ($wFile.Exists -eq "True")            {                #$wXmlString = (New-Object System.Text.UTF8Encoding).GetString($wFile.OpenBinary());                [xml]$wXml = (New-Object System.Text.UTF8Encoding).GetString($wFile.OpenBinary());                #[xml]$wXml = $wXmlString.ToLower()                $nsDetail = $wXml.OuterXml.ToString()                if ($nsDetail)                {                    $nsDetail | Out-File $file.Name
                }
                $wFeatureName = $ns2Find.ToLower()
                if($nsDetail -like "*$wFeatureName*")                {                    $outFolder = $folder -replace "Workflows/",""                    #Create the hashtable here                    $outObject = new-object PSObject                    $outObject | add-member -membertype NoteProperty -name "URL" -Value $web2.Url                    $outObject | add-member -membertype NoteProperty -name "Workflow" -Value $outFolder                    $outObject | add-member -membertype NoteProperty -name "Platform" -Value "2010"                    $outObject | add-member -membertype NoteProperty -name "Action" -Value "Workflow File"                    $outObject | add-member -membertype NoteProperty -name "Created By" -Value $wFile.Author                    $outObject | add-member -membertype NoteProperty -name "Created Date" -Value $wFile.TimeCreated                    $outObject | add-member -membertype NoteProperty -name "Modified By" -Value $wFile.ModifiedBy                    $outObject | add-member -membertype NoteProperty -name "Modified Date" -Value $wFile.TimeLastModified                    $outObject | add-member -membertype NoteProperty -name "Notes" -Value $wXml.FirstChild.OuterXml.ToString()                     $global:resultsarray += $outObject                    #Do we enumerate the offending Actions too?                    if($enumActions)                    {
                        #Find the offending Namespace Prefix
                        $nodes = $wXml.rootworkflowactivitywithdata
                        if ($nodes)
                        {
                            #Get the prefix of the namespaces we're looking for
                            $namespaces = $nodes.Attributes | Where-Object { $_.Prefix -eq 'xmlns' -and $_.Value -like "*$ns2Find*"}
                            foreach ($nameentry in $namespaces)
                            {
                                #$nsPrefix = $nodes.GetPrefixOfNamespace($nameentry.Value)
                                #if ($nsPrefix)
                                #{
                                    #Get the full Namespace
                                    #$fullNamespace = $nodes.GetNamespaceOfPrefix($nsPrefix)
                                    #Create the Namespace Object
                                    $fullns = @{$($nameentry.LocalName)="$($nameentry.Value)"}
                                    #Locate the nodes list
                                    $foundNodes = Select-Xml -Xml $wXml -Namespace $fullns -XPath "//$($nameentry.LocalName):*" | Select -ExpandProperty Node
                                    foreach($foundNode in $foundNodes)                                    {
                                        $outObject = new-object PSObject                                        $outObject | add-member -membertype NoteProperty -name "URL" -Value $web2.Url                                        $outObject | add-member -membertype NoteProperty -name "Workflow" -Value $outFolder                                        $outObject | add-member -membertype NoteProperty -name "Platform" -Value "2010"                                        $outObject | add-member -membertype NoteProperty -name "Action" -Value $foundNode.ToString()                                        $outObject | add-member -membertype NoteProperty -name "Created By" -Value $wFile.Author                                        $outObject | add-member -membertype NoteProperty -name "Created Date" -Value $wFile.TimeCreated                                        $outObject | add-member -membertype NoteProperty -name "Modified By" -Value $wFile.ModifiedBy                                        $outObject | add-member -membertype NoteProperty -name "Modified Date" -Value $wFile.TimeLastModified
                                        $outObject | add-member -membertype NoteProperty -name "Notes" -Value ""
                                        $global:resultsarray += $outObject
                                    }
                                #}
                            }
                        }                    }
                }            }         }     }     # Use recursion to loop through all subfolders.    foreach ($subFolder in $folder.SubFolders)    {        GetFiles($Subfolder)    }}$WebApplications = Get-SPWebApplication
foreach($webApp in $WebApplications){    Write-Host "Checking: $($webApp.DisplayName) $($webApp.Url)"    foreach($site in $webApp.Sites)    {        #Skip deep sites        if ($site.AllWebs.Count -gt 100){Write-Host "Skipping $($site.RootWeb.Title)" -ForegroundColor Magenta; Continue}        if ((Get-SPSite $site.url -ErrorAction SilentlyContinue) -ne $null)         {            try            {                foreach($web in $site.AllWebs)                {                    if ((Get-SPWeb $web.url -ErrorAction SilentlyContinue) -ne $null)                     {                        #2010 Workflows                        $wflist = $web.Lists.TryGetList("Workflows")                        if($wflist -ne $null)                        {                            GetFiles($wflist.RootFolder)                        }                    }                }            }            catch            {                Write-Host "Caught an exception accessing site: $($site.RootWeb.Title) ($($site.Url))" -ForegroundColor Yellow
                #Write-Host "Exception Type: $($_.Exception.GetType().FullName)" -ForegroundColor Red
                Write-Host "Exception Message: $($_.Exception.Message)" -ForegroundColor Red            }        }    }} #output file$resultsarray | Export-csv $fileName -notypeinformation#New-Alias -Name Notepad -Value 'C:\Program Files (x86)\Notepad++\notepad++.exe' -ErrorAction SilentlyContinue#Notepad $fileName